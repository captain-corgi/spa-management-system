pipeline {
  agent any
  environment {
    DOCKERHUB_USERNAME = credentials('dockerhub-username')
    DOCKERHUB_TOKEN = credentials('dockerhub-token')
    EMAIL_USER = credentials('email-user')
    EMAIL_PASSWORD = credentials('email-password')
    NOTIFY_EMAIL = credentials('notify-email')
    CODECOV_TOKEN = credentials('codecov-token')
  }
  options {
    skipDefaultCheckout(true)
    timestamps()
    ansiColor('xterm')
  }
  parameters {
    choice(name: 'ENV', choices: ['dev', 'sit', 'uat', 'nft', 'prd'], description: 'Target environment')
    choice(name: 'GIT_BRANCH', choices: ['develop', 'sit', 'uat', 'nft', 'main'], description: 'Branch to build')
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('Backend Matrix Build & Test') {
      matrix {
        axes {
          axis {
            name 'SERVICE'
            values 'customer-service', 'appointment-service', 'staff-service', 'branch-service', 'marketing-service', 'finance-service', 'analytics-service'
          }
        }
        stages {
          stage('Build & Test') {
            steps {
              dir("backend/services/${SERVICE}") {
                sh 'go mod download'
                sh 'go test -v ./...'
                sh 'docker build -t $DOCKERHUB_USERNAME/${SERVICE}:${ENV}-${GIT_COMMIT} .'
                sh 'trivy image $DOCKERHUB_USERNAME/${SERVICE}:${ENV}-${GIT_COMMIT} || true'
                sh 'docker push $DOCKERHUB_USERNAME/${SERVICE}:${ENV}-${GIT_COMMIT}'
              }
            }
          }
        }
      }
    }
    stage('Frontend Matrix Build & Test') {
      matrix {
        axes {
          axis {
            name 'APP'
            values 'shell', 'customer-app', 'appointment-app', 'staff-app', 'branch-app', 'marketing-app', 'finance-app', 'analytics-app'
          }
        }
        stages {
          stage('Build & Test') {
            steps {
              dir("frontend/${APP}") {
                sh 'npm ci'
                sh 'npm run test -- --coverage'
                sh 'npm run build'
                sh 'docker build -t $DOCKERHUB_USERNAME/${APP}:${ENV}-${GIT_COMMIT} .'
                sh 'trivy image $DOCKERHUB_USERNAME/${APP}:${ENV}-${GIT_COMMIT} || true'
                sh 'docker push $DOCKERHUB_USERNAME/${APP}:${ENV}-${GIT_COMMIT}'
              }
            }
          }
        }
      }
    }
    stage('Deploy to Kubernetes') {
      steps {
        script {
          def ns = "spa-${params.ENV == 'prd' ? 'system' : params.ENV}"
          def backendServices = ['customer-service', 'appointment-service', 'staff-service', 'branch-service', 'marketing-service', 'finance-service', 'analytics-service']
          def frontendApps = ['shell', 'customer-app', 'appointment-app', 'staff-app', 'branch-app', 'marketing-app', 'finance-app', 'analytics-app']
          backendServices.each { svc ->
            sh "kubectl set image deployment/${svc} ${svc}=$DOCKERHUB_USERNAME/${svc}:${params.ENV}-${GIT_COMMIT} -n ${ns}"
          }
          frontendApps.each { app ->
            sh "kubectl set image deployment/${app} ${app}=$DOCKERHUB_USERNAME/${app}:${params.ENV}-${GIT_COMMIT} -n ${ns}"
          }
        }
      }
    }
    stage('Notify') {
      steps {
        mail to: "$NOTIFY_EMAIL",
             subject: "[SpaMS] Deploy Success: ${params.ENV.toUpperCase()} - ${GIT_COMMIT}",
             body: "Deployment to ${params.ENV.toUpperCase()} successful."
      }
    }
  }
  post {
    always {
      cleanWs()
    }
    failure {
      mail to: "$NOTIFY_EMAIL",
           subject: "[SpaMS] Deploy FAILED: ${params.ENV.toUpperCase()} - ${GIT_COMMIT}",
           body: "Deployment to ${params.ENV.toUpperCase()} failed. Check Jenkins logs."
    }
  }
}
